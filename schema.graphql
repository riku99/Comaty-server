interface UserEntity {
  id: ID!
  nickname: String
  sex: SEX
}

type User implements UserEntity {
  id: ID!
  nickname: String
  sex: SEX
}

type Me implements UserEntity {
  id: ID!
  nickname: String
  sex: SEX
  initialStatusCompletion: Boolean!
  birthYear: Int
  birthMonth: Int
  birthDay: Int
}

type Query {
  user(id: ID!): User!
  me: Me
}

input CreateUserInput {
  email: String!
  idToken: String!
}

input UpdateInitialStatusInput {
  nickname: String!
  birthYear: Int!
  birthMonth: Int!
  birthDay: Int!
  sex: SEX!
}

type Mutation {
  createUser(input: CreateUserInput!): Me!
  updateInitialStatus(input: UpdateInitialStatusInput!): Me!
}

enum SEX {
  MALE
  FEMALE
  NOT_SELECTED
}

enum CreateUserError {
  ALREADY_USER_EXISTING
}

enum UserGetError {
  NOT_FOUND
}
